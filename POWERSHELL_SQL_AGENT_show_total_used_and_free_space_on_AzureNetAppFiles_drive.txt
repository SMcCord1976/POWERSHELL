# PowerShell script to report total and free space of a remote file share for SQL Server Agent with email alert

# Define the UNC path to your remote file share
$FileSharePath = "\\INFSQLBackup\INFSQLBUNAStorage"

# Define output CSV path (ensure this is writable by the SQL Agent account)
$CsvPath = "W:\Reports\FileShareSpaceReport.csv"  # Adjust as needed

# Email settings (adjust as needed)
$EmailProfile = "SQLServer"  # SQL mail profile name
$EmailRecipient = "stephenm@consumerdirectcare.com"  # Replace with email
$EmailSubjectPrefix = "[STORAGE REPORT] - Azure NetApp Volume Space"

# Function to format sizes dynamically (GB or TB)
function Format-Size {
    param ([double]$GB)
    if ($GB -ge 1024) {
        $TB = $GB / 1024
        "{0:N2} TB" -f $TB
    } else {
        "{0:N2} GB" -f $GB
    }
}

try {
    # Check if the path is accessible
    if (-not (Test-Path -Path $FileSharePath)) {
        throw "The file share path '$FileSharePath' is not accessible. Check path or permissions."
    }

    # Map the share to a temporary drive letter (non-persistent for SQL Agent)
    $DriveLetter = "Z"  # Use an available letter; adjust if Z: is in use
    if (Test-Path "$DriveLetter`:") {
        throw "Drive letter $DriveLetter`: is already in use. Choose another."
    }

    # Map the network drive (scope to script for non-interactive use)
    New-PSDrive -Name $DriveLetter -PSProvider FileSystem -Root $FileSharePath -Scope Script -ErrorAction Stop
    Write-Output "Mapped $FileSharePath to $DriveLetter`:"

    # Get disk info from the mapped drive
    $Disk = Get-PSDrive -Name $DriveLetter
    if (-not $Disk) {
        throw "Could not retrieve disk information for the mapped drive."
    }

    # Calculate sizes in GB (Get-PSDrive returns bytes)
    $TotalSizeGB = ($Disk.Used + $Disk.Free) / (1024 * 1024 * 1024)  # Bytes to GB
    $FreeSpaceGB = $Disk.Free / (1024 * 1024 * 1024)                 # Bytes to GB
    $UsedSpaceGB = $Disk.Used / (1024 * 1024 * 1024)                 # Bytes to GB

    # Format the sizes dynamically (GB or TB)
    $TotalSize = Format-Size -GB $TotalSizeGB
    $FreeSpace = Format-Size -GB $FreeSpaceGB
    $UsedSpace = Format-Size -GB $UsedSpaceGB

    # Calculate percentage used and free using GB
    $PercentUsed = [math]::Round(($UsedSpaceGB / $TotalSizeGB) * 100, 2)
    $PercentFree = [math]::Round(($FreeSpaceGB / $TotalSizeGB) * 100, 2)

    # Console output (visible in SQL Agent job history)
    Write-Output "File Share: $FileSharePath"
    Write-Output "Total Size: $TotalSize"
    Write-Output "Used Space: $UsedSpace ($PercentUsed%)"
    Write-Output "Free Space: $FreeSpace ($PercentFree%)"

    # Export to CSV
    $Report = [PSCustomObject]@{
        FileShare   = $FileSharePath
        TotalSize   = $TotalSize
        UsedSpace   = $UsedSpace
        FreeSpace   = $FreeSpace
        PercentUsed = "$PercentUsed%"
        PercentFree = "$PercentFree%"
        DateChecked = Get-Date
    }
    $Report | Export-Csv -Path $CsvPath -NoTypeInformation -Append
    Write-Output "Report saved to $CsvPath"

    # Build HTML email body
    $Body = @"
<html>
<head>
<style>
    table { border-collapse: collapse; }
    th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
    th { background-color: #f2f2f2; }
    #used { color: #ff9900; } /* Orange for used space */
    #free { color: #00cc00; } /* Green for free space */
    #odd { background-color: #e6f0fa; } /* Light blue for odd rows */
</style>
</head>
<body>
<h3>Azure NetApp Volume Space Report</h3>
<p>Storage details for <b>$FileSharePath</b> as of $(Get-Date):</p>
<table>
    <tr>
        <th>Total Size</th>
        <th>Used Space</th>
        <th>Free Space</th>
        <th>Percent Used</th>
        <th>Percent Free</th>
    </tr>
    <tr id="odd">
        <td>$TotalSize</td>
        <td id="used">$UsedSpace</td>
        <td id="free">$FreeSpace</td>
        <td id="used">$PercentUsed%</td>
        <td id="free">$PercentFree%</td>
    </tr>
</table>
<p><i>Generated by SQL Server Agent job on $(hostname)</i></p>
</body>
</html>
"@

    # Send email via SQL Server Database Mail
    $EmailSubject = "$EmailSubjectPrefix - $TotalSize Total, $PercentFree% Free"
    try {
        # Use Invoke-Sqlcmd for SQL Agent compatibility (assumes SQLPS module available)
        Invoke-Sqlcmd -Query "EXEC msdb.dbo.sp_send_dbmail 
            @profile_name = '$EmailProfile',
            @recipients = '$EmailRecipient',
            @subject = '$EmailSubject',
            @body = '$Body',
            @body_format = 'HTML';" -ServerInstance "localhost" -ErrorAction Stop
        Write-Output "Email sent to $EmailRecipient"
    } catch {
        Write-Error "Failed to send email: $($_.Exception.Message)"
    }
}
catch {
    Write-Error "Error: $($_.Exception.Message)"
    exit 1  # Exit with error for SQL Agent
}
finally {
    # Clean up: Remove the mapped drive if it was created
    if (Test-Path "$DriveLetter`:") {
        Remove-PSDrive -Name $DriveLetter -Force
        Write-Output "Unmapped $DriveLetter`:"
    }
}